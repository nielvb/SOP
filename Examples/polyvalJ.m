function ff = polyvalJ(H,s,sd,p0,d)
% Evaluates a sequence of polynomials and their derivatives represented by 
% a Hessenberg matrix in the points s and sd respectively.
% Constructs the Vandermonde matrix and confluent Vandermonde matrix
% in points s associated with the polynomials determined by 
% the Hessenberg recurrence matrix H
%INPUT
%   p0 = the value of the zeroth polynomial (this info cannot be obtained
%   from H, and therefore must be provided separately)
%   s = N1 points in which to evaluate the polynomials
%   sd = N2<N1 points in which to evaluate the derivatives of the polynomials
%           sd must be a subset of s
%   H = (n+1)xn Hessenberg recurrence matrix, determining sequence of
%   polynomials [p0,p1,...,pn]
%OUTPUT:
%   ff = P*d = confluent Vandermonde matrix multiplied with coefficients d, confluent 
%   Vandermonde matrix is generated by polynomials {p0,p1,...} determined by H
%   and evaluation in points s, let the accent ' denote derivative:
%   [p0'(s1), p1'(s1), ..., pn'(s1);
%    p0(s1), p1(s1), ..., pn(s1);
%    p0'(s2), p1'(s2), ..., pn'(s2);
%    p0(s2), p1(s2), ..., pn(s2);
%       ...     ...     ...     ;
%    p0'(sN), p1'(sN), ..., pn'(sN);
%    p0(sN), p1(sN), ..., pn(sN)]
%
    M = length(s) + length(sd);
    P = ones(M,1)*p0;
    n = size(H,2);
    % Construct Jordan matrix
    S = zeros(M);
    ind = 1;
    for k = 1:length(s)
        ss = s(k);
        if sum(ss==sd)~=0
            S(ind,ind) = ss;
            S(ind,ind+1) = 1;
            S(ind+1,ind+1) = ss;
            P(ind) = 0;
            ind = ind + 2;
        else
            S(ind,ind) = ss;
            ind = ind +1;
        end
    end
    % Evaluate using the Hessenberg matrix
    for k=1:n
        w = S*P(:,k);
        for j=1:k
            w = w-H(j,k)*P(:,j);
        end
        P = [P,w/H(k+1,k)];
    end
    ff = P*d;